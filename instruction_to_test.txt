
#out-of-order link
https://www.youtube.com/watch?v=EdYAKfx9JEA&list=LL&index=2
https://www.youtube.com/watch?v=1tvW8kzOpSA
https://www.youtube.com/watch?v=BGaLNhyr-2Q

# Independent Instructions
1. ADDI x1, x0, 1      #000000000001  00001 000 00001 0010011 x1 = 1 (Immediate operation)
2. SW x1, 0(x1)        #0000000 00001 00001 001 00000 0100011 Store word x1 into memory address x1
3. ADDI x2, x0, 2      #000000000010  00010 000 00010 0010011 x2 = 2
4. SW x2, 0(x2)        #0000000 00010 00010 001 00000 0100011 Store word x2 into memory address x2
5. ADDI x3, x0, 3      #000000000011  00011 000 00011 0010011 x3 = 3 (Immediate operation)
6. SW x3, 0(x3)        #0000000 00011 00011 001 00000 0100011 Store word x3 into memory address x3
7. ADDI x4, x0, 4      #000000000100  00100 000 00100 0010011 x4 = 4
8. SW x4, 0(x4)        #0000000 00100 00100 001 00000 0100011 Store word x4 into memory address x4
9. ADDI x5, x0, 5      #000000000101  00101 000 00101 0010011 x5 = 5 (Immediate operation)
10.SW x5, 0(x5)        #0000000 00101 00101 001 00000 0100011 Store word x5 into memory address x5
11.ADDI x6, x0, 6      #000000000110  00110 000 00110 0010011 x6 = 6
12.SW x6, 0(x6)        #0000000 00110 00110 001 00000 0100011 Store word x6 into memory address x6
13.ADDI x7, x0, 7      #000000000111  00111 000 00111 0010011 x7 = 7 (Immediate operation)
14.SW x7, 0(x7)        #0000000 00111 00111 001 00000 0100011 Store word x7 into memory address x7



# Independent Memory Instructions
15. ADD x1, x7, x1    #0000000 00001 00111 000 00001 0110011  x1 = x7 + x1(Dependent on instruction #13, where x7 is updated.)
16. LW x2, 0(x1)      #0000000 00000 00001 000 00010 0100011  x2 = Memory[x1](Dependent on instruction #1 for x1.)
17. ADD x3, x2, x2    #0000000 00010 00010 000 00011 0110011  x3 = x2 + 2(Dependent on instruction #2 for x2.)
18. SW x3, 4(x1)      #0000100 00011 00001 001 00000 0100011  Memory[x1 + 4] = x3(Dependent on instructions #1 and #3.)
19. ADD x4, x3, x3    #0000000 00011 00011 000 00100 0110011  x4 = x3 + 3 (Dependent on instruction #3 for x3.)
20. LW x5, 8(x3)      #0001000 00000 00011 000 00101 0100011  x5 = Memory[x3 + 8] (Dependent on instruction #3 for x3.)
21. ADD x6, x4, x4    #0000000 00100 00100 000 00110 0110011  x6 = x4 + 4(Dependent on instruction #5 for x4.)
22. SW x6, 12(x5)     #0001100 00110 00101 001 00000 0100011  Memory[x5 + 12] = x6(Dependent on instructions #5 and #6 for x5 and x6.)
23. ADD x7, x6, x5    #0000000 00101 00110 000 00101 0110011  x7 = x6 + 5(Dependent on instruction #7 for x6.)
24. LW x1, 16(x6)     #0010000 00000 00110 000 00001 0100011  x1 = Memory[x6 + 16](Dependent on instruction #7 for x6.)
25. ADD x2, x7, x6    #0000000 00110 00111 000 00010 0110011  x2 = x7 + 6(Dependent on instruction #9 for x7.)
26. SW x2, 20(x1)     #0010100 00010 00001 001 00000 0100011  Memory[x1 + 20] = x2(Dependent on instructions #10 and #11 for x1 and x2.)
27. ADD x3, x2, x7    #0000000 00111 00010 000 00011 0110011  x3 = x2 + 7(Dependent on instruction #11 for x2.)
28. SW x3, 24(x3)     #0011000 00011 00011 001 00000 0100011  Memory[x3 + 24] = x3(Dependent on instruction #13 for x3.)








# RAW Hazards (Read-After-Write)
1.  ADD x1, x2, x3       #0000000 00010 00011 000 00001 0110011 x1 = x2 + x3
2.  SUB x4, x1, x5       #0100000 0010100001000001000110011 x4 = x1 - x5  (x1 used before it's updated)
3.  ADD x6, x1, x7       #0000000 0000100111000001100110011 x6 = x1 + x7  (x1 used again)

# Independent Instructions
4.  ADDI x7, x0, 10      #0000000 0101000000000001110010011 x7 = 10 (Immediate operation)
5.  ADDI x3, x0, 20      #0000000 1010000000000000110010011 x3 = 20
6.  AND x5, x7, x3       #0000000 0011100011111001010110011 x5 = x7 & x3

# More RAW Hazards
7.  ADD x2, x5, x4       #0000000 0010100100000000100110011 x2 = x5 + x4
8.  SUB x3, x2, x6       #0100000 00110 00010 000 00011 0110011 x3 = x2 - x6
9.  ADD x1, x3, x5       #0000000 0001100101000000010110011 x1 = x3 + x5

# WAR Hazard (Write-After-Read)
10. SUB x4, x3, x2       #0100000 0001000011000001000110011 x4 = x3 - x2  (x2 read, x4 written)
11. ADD x2, x1, x5       #0000000 0010100001000000100110011 x2 = x1 + x5  (WAR: x2 written after being read)

# WAW Hazard (Write-After-Write)
12. ADD x6, x7, x5       #0000000 0010100111000001100110011 x6 = x7 + x5
13. SUB x6, x4, x3       #0100000 0001100100000001100110011 x6 = x4 - x3 (x6 written again)
14. SW x2, 0(x6)         #0000000 00010 00110 001 00000 0100011 Store word x2 into memory address x6

# Independent Instructions
15. OR x7, x5, x4        #0000000 0010000101101001110110011 x7 = x5 | x4
16. XOR x5, x7, x3       #0000000 00111 00011 011 00101 0110011 x5 = x7 ^ x3

# RAW Chain
17. ADD x2, x5, x6       #0000000 0011000101000000100110011 x2 = x5 + x6
18. SUB x1, x2, x4       #0100000 001000001000000001 0110011 x1 = x2 - x4
19. AND x3, x1, x7       #0000000 00001 00111 111 00011 0110011 x3 = x1 & x7
20. LW x2, 0(x7)         #0000000 00000 00111 000 00010 0100011 Load word from memory address x7 into x2

# More Independent Instructions
21. SRLI x4, x3, 2       #0000000 00010 00011 000 00100 0010011 x4 = x3 >> 2 (Logical shift right)
22. SLLI x5, x7, 2       #0000000 00010 00111 000 00101 0010011 x5 = x7 << 2 (Logical shift left)
23. SW x2, 0(x6)         #0000000 00010 00110 001 00000 0100011 Store word x2 into memory address x6

# RAW & WAR Mix
24. ADD x6, x4, x2       #0000000 0001000100000001100110011 x6 = x4 + x2
25. SUB x2, x6, x5       #0100000 0010100110000000100110011 x2 = x6 - x5 (WAR: x2 written after being read)
26. LW x2, 0(x7)         #0000000 00000 00111 000 00010 0100011 Load word from memory address x7 into x2









# Branch Instructions
23. BEQ x4, x5, LABEL1   #1100011 If x4 == x5, branch to LABEL1
24. ADDI x1, x0, 1       #0010011 x1 = 1 (Delay slot)
LABEL1:  
25. JAL x3, LABEL2       #1101111 Jump to LABEL2, save return address in x3
26. NOP                  # No operation (Delay slot)

LABEL2:  
27. LW x2, 0(x7)         #0100011 Load word from memory address x7 into x2
28. SW x2, 0(x6)         #0100011 Store word x2 into memory address x6

# Final Instructions
29. ADD x4, x6, x1       #0110011 x4 = x6 + x1
30. HALT                 # Stop execution
